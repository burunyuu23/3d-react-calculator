/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 double_keycap_m.gltf
*/

import React, {useCallback, useEffect, useState} from 'react'
import {Text} from '@react-three/drei'
import {useSpring, a} from "@react-spring/three";


export default function BaseKeycap({basePosition, scaleAmp, text, func, children, clickable=true, ...props}) {
    const [clicked, setClicked] = useState(false);
    const [isClickable] = useState(clickable);

    const {position} = useSpring({
        position: clicked
            ?
            [0, -0.5, 0]
            :
            [0, 0, 0], // Начальная и конечная позиции объекта
        config: {mass: 1, tension: 200, friction: 20}, // Настройки анимации
    });

    useEffect(() => {
        if (isClickable) {
            if (clicked === true) {
                func(text);
            }
        }
    }, [isClickable,func, text,clicked])

    const handleClick = useCallback(() => {
        if (isClickable) {
            setClicked((prevClicked) => {
                if (!prevClicked) {
                    setTimeout(() =>
                        setClicked(false), 200)
                    return true;
                }
            });
        }
    }, [isClickable]);

    return (
        <group
            onClick={handleClick}
            dispose={null}
            rotation={[Math.PI / 2, 0, 0]}>
            <group
                position={basePosition}
                scale={[scaleAmp, scaleAmp, scaleAmp]}
                rotation={[-Math.PI / 4, 0, 0]}>
                <a.group
                    position={position}
                    rotation={[0, 0, 0]}>
                    <group rotation={[-Math.PI / 2, 0, 0]}
                           position={[0, Math.PI / 4, Math.PI / 23]}>
                        <Text
                            onClick={handleClick}
                            color={"black"}>
                            {text}
                        </Text>
                    </group>
                    <group {...props}>
                    {children}
            </group>
                </a.group>
            </group>
        </group>
    )
}
